// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bengreenier/docker-mon/internal/app/mon (interfaces: DockerAPI)

// Package mock_mon is a generated GoMock package.
package mock_mon

import (
	types "github.com/docker/docker/api/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDockerAPI is a mock of DockerAPI interface
type MockDockerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerAPIMockRecorder
}

// MockDockerAPIMockRecorder is the mock recorder for MockDockerAPI
type MockDockerAPIMockRecorder struct {
	mock *MockDockerAPI
}

// NewMockDockerAPI creates a new mock instance
func NewMockDockerAPI(ctrl *gomock.Controller) *MockDockerAPI {
	mock := &MockDockerAPI{ctrl: ctrl}
	mock.recorder = &MockDockerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDockerAPI) EXPECT() *MockDockerAPIMockRecorder {
	return m.recorder
}

// ExecuteListQuery mocks base method
func (m *MockDockerAPI) ExecuteListQuery(arg0 []string) ([]types.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteListQuery", arg0)
	ret0, _ := ret[0].([]types.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteListQuery indicates an expected call of ExecuteListQuery
func (mr *MockDockerAPIMockRecorder) ExecuteListQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteListQuery", reflect.TypeOf((*MockDockerAPI)(nil).ExecuteListQuery), arg0)
}

// Inspect mocks base method
func (m *MockDockerAPI) Inspect(arg0 types.Container) (types.ContainerJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0)
	ret0, _ := ret[0].(types.ContainerJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect
func (mr *MockDockerAPIMockRecorder) Inspect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockDockerAPI)(nil).Inspect), arg0)
}

// Remove mocks base method
func (m *MockDockerAPI) Remove(arg0 types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockDockerAPIMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDockerAPI)(nil).Remove), arg0)
}

// Restart mocks base method
func (m *MockDockerAPI) Restart(arg0 int64, arg1 types.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart
func (mr *MockDockerAPIMockRecorder) Restart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockDockerAPI)(nil).Restart), arg0, arg1)
}
